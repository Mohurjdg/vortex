-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,if not game:IsLoaded() then
game.Loaded:Wait()
end

if not syn or not protectgui then
getgenv().protectgui = function() end
end

local var_wf4avp = {
Enabled = false,

ClassName = "hook it already nga",
ToggleKey = "None",

VisibleCheck = false,
TargetPart = "HumanoidRootPart",
SilentAimMethod = "Raycast",

FOVRadius = 130,
FOVVisible = false,
ShowSilentAimTarget = false,

MouseHitPrediction = false,
MouseHitPredictionAmount = 0.165,
HitChance = 100,

ZoomEnabled = false,
ZoomKey = "",
ZoomFOV = 30,

FovChangerEnabled = false,
FovValue = 70,

BoxEnabled = false,
BoxColor = Color3.fromRGB(0, 0, 0),
HealthEnabled = false,
NameEnabled = false,
NameType = "DisplayName",

FlyEnabled = false,
FlyKey = "",
FlySpeed = 50,

TracerESPEnabled = false,
TracerESPMethod = "Mouse",
TracerESPColor = Color3.fromRGB(255, 255, 255),

FOVMethod = "Normal",

NoRecoilEnabled = false,

HempESPEnabled = false,

BulletTracerEnabled = false,
BulletTracerColor = Color3.fromRGB(255, 255, 0),


HitSoundEnabled = false,
HitSoundVolume = 5,
HitSoundType = "arena change",
}

getgenv().SilentAimSettings = SilentAimSettings

local var_5ylx6a = workspace.CurrentCamera
local var_o9a8xu = Camera.FieldOfView
local var_8fvt2a = game:GetService("Players")
local var_d6i8kb = game:GetService("RunService")
local var_6hyuvd = game:GetService("GuiService")
local var_g0tv3e = game:GetService("UserInputService")
local var_ppuiu7 = game:GetService("HttpService")
local var_d6vvo0 = game:GetService("Lighting")

local var_nz52sk = Players.LocalPlayer
local var_olpk4a = LocalPlayer:GetMouse()

local var_ynbgik = game.GetChildren
local var_c6dh0g = Players.GetPlayers
local var_1u7f1j = Camera.WorldToScreenPoint
local var_w71bkf = Camera.WorldToViewportPoint
local var_xcl31m = Camera.GetPartsObscuringTarget
local var_ct8vx8 = game.FindFirstChild
local var_ifct5j = RunService.RenderStepped
local var_v6dybr = GuiService.GetGuiInset
local var_w4cgyz = UserInputService.GetMouseLocation

local var_kh2o3n = coroutine.resume
local var_pcbrw6 = coroutine.create

local var_4t99gg = {"Head", "HumanoidRootPart"}
local var_cd4x3g = 0.165

local var_z6iknh = Drawing.new("Line")
target_tracer.Visible = false
target_tracer.Color = Color3.fromRGB(255, 0, 0)
target_tracer.Thickness = 1

local var_kll8oz = Drawing.new("Circle")
fov_circle.Thickness = 1
fov_circle.NumSides = 100
fov_circle.Radius = 180
fov_circle.Filled = false
fov_circle.Visible = false
fov_circle.ZIndex = 999
fov_circle.Transparency = 1
fov_circle.Color = Color3.fromRGB(255, 0, 0)

local var_6jx894 = {}
local var_lgey3a = 36
local var_y6046g = 2
local var_ldplsg = 0.5
local var_q4gd20 = 0

local var_e1m8q4 hsvToRgb(h, s, v)
local var_qtux5r, g, b
local var_yetoqk = math.floor(h * 6)
local var_zy8myz = h * 6 - i
local var_8mxqms = v * (1 - s)
local var_ybvg46 = v * (1 - f * s)
local var_a0v48o = v * (1 - (1 - f) * s)
if i % 6 == 0 then
r, g, b = v, t, p
elseif i % 6 == 1 then
r, g, b = q, v, p
elseif i % 6 == 2 then
r, g, b = p, v, t
elseif i % 6 == 3 then
r, g, b = p, q, v
elseif i % 6 == 4 then
r, g, b = t, p, v
elseif i % 6 == 5 then
r, g, b = v, p, q
end
return Color3.fromRGB(math.floor(r * 255), math.floor(g * 255), math.floor(b * 255))
end

local var_eq9wmv createRainbowLines()
for i = 1, rainbow_segments do
local var_6bp6jf = Drawing.new("Line")
line.Visible = false
line.Thickness = rainbow_thickness
line.Transparency = 1
rainbow_lines[i] = line
end
end

local var_i5d00l updateFOVDots(position, radius, color, method, deltaTime)
if method == "Rainbow" then
if #rainbow_lines == 0 then
createRainbowLines()
end
fov_circle.Visible = false
rainbow_timeElapsed = rainbow_timeElapsed + deltaTime * rainbow_animationSpeed
local var_n0mv0a = 360 / rainbow_segments
for i = 1, rainbow_segments do
local var_brkvou = (i - 1) * angleStep
local var_oadqrp = i * angleStep
local var_2hgyzg = math.rad(startAngle)
local var_107bzr = math.rad(endAngle)
local var_v2cmzp = position + Vector2.new(math.cos(startRad) * radius, math.sin(startRad) * radius)
local var_oaatrl = position + Vector2.new(math.cos(endRad) * radius, math.sin(endRad) * radius)
rainbow_lines[i].From = startPos
rainbow_lines[i].To = endPos
local var_cnccjs = ((i / rainbow_segments) + (rainbow_timeElapsed % 1)) % 1
rainbow_lines[i].Color = hsvToRgb(hue, 1, 1)
rainbow_lines[i].Visible = true
end
else
fov_circle.Visible = true
for _, line in ipairs(rainbow_lines) do
line.Visible = false
end
end
end

local var_kglwax = {
FindPartOnRayWithIgnoreList = {ArgCountRequired = 3, Args = {"Instance", "Ray", "table", "boolean", "boolean"}},
FindPartOnRayWithWhitelist = {ArgCountRequired = 3, Args = {"Instance", "Ray", "table", "boolean"}},
FindPartOnRay = {ArgCountRequired = 2, Args = {"Instance", "Ray", "Instance", "boolean", "boolean"}},
Raycast = {ArgCountRequired = 3, Args = {"Instance", "Vector3", "Vector3", "RaycastParams"}}
}

local var_vk90en = Lighting.Ambient
local var_pcd0ej = Lighting.FogEnd
local var_q404z3 = Lighting.FogStart
local var_tt4g3m = Lighting.ClockTime

local var_1fp7ct = nil
local var_ruzq76 = nil
local var_ucwv71 = nil

function CalculateChance(Percentage)
Percentage = math.floor(Percentage)
local var_2tyjg4 = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100
return chance <= Percentage / 100
end

local var_bix50b getPositionOnScreen(Vector)
local var_l22ssd, OnScreen = WorldToScreen(Camera, Vector)
return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

local var_pmvng4 ValidateArguments(Args, RayMethod)
local var_poivp0 = 0
if #Args < RayMethod.ArgCountRequired then return false end
for Pos, Argument in next, Args do
if typeof(Argument) == RayMethod.Args[Pos] then Matches = Matches + 1 end
end
return Matches >= RayMethod.ArgCountRequired
end

local var_jooxfz getDirection(Origin, Position)
return (Position - Origin).Unit * 1000
end

local var_3xgzt6 getMousePosition()
return GetMouseLocation(UserInputService)
end

local var_jvb7xs IsPlayerVisible(Player)
local var_od3ebr = Player.Character
local var_k4rpgy = LocalPlayer.Character
if not (PlayerCharacter or LocalPlayerCharacter) then return end
local var_twxaa0 = FindFirstChild(PlayerCharacter, SilentAimSettings.TargetPart) or FindFirstChild(PlayerCharacter, "HumanoidRootPart")
if not PlayerRoot then return end
local var_t9hwb0, IgnoreList = {PlayerRoot.Position, LocalPlayerCharacter, PlayerCharacter}, {LocalPlayerCharacter, PlayerCharacter}
local var_nstql1 = #GetPartsObscuringTarget(Camera, CastPoints, IgnoreList)
return ((ObscuringObjects == 0 and true) or (ObscuringObjects > 0 and false))
end

local var_evwphw getClosestPlayer()
if not SilentAimSettings.TargetPart then return end
local var_pajms6
local var_ujsfzu
for _, Player in next, GetPlayers(Players) do
if Player == LocalPlayer then continue end
local var_nbz4wn = Player.Character
if not Character then continue end
if SilentAimSettings.VisibleCheck and not IsPlayerVisible(Player) then continue end
local var_hnkqrh = FindFirstChild(Character, "HumanoidRootPart")
local var_tubdi6 = FindFirstChild(Character, "Humanoid")
if not HumanoidRootPart or not Humanoid or Humanoid and Humanoid.Health <= 0 then continue end
local var_3mp11k, OnScreen = getPositionOnScreen(HumanoidRootPart.Position)
if not OnScreen then continue end
local var_lf15eh = (getMousePosition() - ScreenPosition).Magnitude
if Distance <= (DistanceToMouse or SilentAimSettings.FOVRadius or 2000) then
Closest = ((SilentAimSettings.TargetPart == "Random" and Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]) or Character[SilentAimSettings.TargetPart])
DistanceToMouse = Distance
end
end
return Closest
end

local var_oq9y2z get2DBBox(character)
if not character or not FindFirstChild(character, "HumanoidRootPart") then return nil end
local var_aoscuf = character:FindFirstChild("HumanoidRootPart")
if (rootPart.Position - Camera.CFrame.Position).Magnitude > 1000 then return nil end
local var_d6vm64, size = character:GetBoundingBox()
local var_43tfav = size / 2
local var_tmzgc7 = {
cf * Vector3.new(-halfSize.X, -halfSize.Y, -halfSize.Z),
cf * Vector3.new(-halfSize.X, -halfSize.Y, halfSize.Z),
cf * Vector3.new(-halfSize.X, halfSize.Y, -halfSize.Z),
cf * Vector3.new(-halfSize.X, halfSize.Y, halfSize.Z),
cf * Vector3.new(halfSize.X, -halfSize.Y, -halfSize.Z),
cf * Vector3.new(halfSize.X, -halfSize.Y, halfSize.Z),
cf * Vector3.new(halfSize.X, halfSize.Y, -halfSize.Z),
cf * Vector3.new(halfSize.X, halfSize.Y, halfSize.Z),
}
local var_pidmzu, minY, maxX, maxY = math.huge, math.huge, -math.huge, -math.huge
local var_ai60f9 = false
for _, pos in ipairs(corners) do
local var_bo47m2 = WorldToViewportPoint(Camera, pos)
if screen.Z > 0 then
onScreen = true
local var_tzo77g, y = screen.X, screen.Y
minX = math.min(minX, x)
minY = math.min(minY, y)
maxX = math.max(maxX, x)
maxY = math.max(maxY, y)
end
end
if not onScreen then return nil end
local var_y03d28 = maxX - minX
local var_lvy0cj = maxY - minY
if width > 200 or height > 300 or width <= 0 or height <= 0 then return nil end
return Vector2.new(minX, minY), Vector2.new(width, height)
end

local var_qe44zp getHealthColor(fill)
if fill > 0.5 then
return Color3.fromRGB(0, 255, 0)
elseif fill > 0.2 then
return Color3.fromRGB(255, 255, 0)
else
return Color3.fromRGB(255, 0, 0)
end
end

local var_hou5u9 = {}
local var_sujx8z = 0.2

local var_p5u0s7 CreateESPObjects(player, humanoid)
local var_fwb2a2 = {
box = Drawing.new("Square"),
healthBg = Drawing.new("Square"),
healthFill = Drawing.new("Square"),
nameText = Drawing.new("Text"),
tracer = Drawing.new("Line"),
transparency = 0,
targetTransparency = 1,
currentFill = humanoid.Health / humanoid.MaxHealth,
targetFill = humanoid.Health / humanoid.MaxHealth,
currentColor = getHealthColor(humanoid.Health / humanoid.MaxHealth),
targetColor = getHealthColor(humanoid.Health / humanoid.MaxHealth),
connections = {}
}
esp.box.Filled = false
esp.box.Thickness = 1
esp.box.Visible = false
esp.healthBg.Filled = true
esp.healthBg.Color = Color3.new(0, 0, 0)
esp.healthBg.Visible = false
esp.healthFill.Filled = true
esp.healthFill.Visible = false
esp.nameText.Center = true
esp.nameText.Outline = true
esp.nameText.Size = 13
esp.nameText.Color = Color3.new(1, 1, 1)
esp.nameText.Visible = false
esp.tracer.Thickness = 1
esp.tracer.Visible = false
esp.tracer.Color = SilentAimSettings.TracerESPColor
table.insert(esp.connections, humanoid.HealthChanged:Connect(function(newHealth)
esp.targetFill = math.clamp(newHealth / humanoid.MaxHealth, 0, 1)
esp.targetColor = getHealthColor(esp.targetFill)
end))
table.insert(esp.connections, humanoid.Died:Connect(function()
esp.targetTransparency = 0
end))
ESP[player] = esp
end

local var_7inkh2 RemoveESP(player)
local var_velled = ESP[player]
if esp then
for _, obj in pairs({esp.box, esp.healthBg, esp.healthFill, esp.nameText, esp.tracer}) do
obj:Remove()
end
for _, conn in pairs(esp.connections) do
conn:Disconnect()
end
ESP[player] = nil
end
end

local var_4hod2m SetupPlayerESP(player)
local var_ghk9sb onCharacterAdded(char)
local var_p49a3t = char:WaitForChild("Humanoid", 5)
if humanoid then
if ESP[player] then
RemoveESP(player)
end
CreateESPObjects(player, humanoid)
end
end

local var_oda17t onCharacterRemoved()
local var_ppysoq = ESP[player]
if esp then
esp.targetTransparency = 0
end
end

if player and player.Character and typeof(player.Character) == "Instance" then
pcall(onCharacterAdded, player.Character)
end
player.CharacterAdded:Connect(function(char)
pcall(onCharacterAdded, char)
end)
if player then
pcall(function()
player.CharacterRemoved:Connect(onCharacterRemoved)
end)
end
end

for _, player in ipairs(Players:GetPlayers()) do
if player ~= LocalPlayer then
SetupPlayerESP(player)
end
end

Players.PlayerAdded:Connect(function(player)
if player and LocalPlayer and player ~= LocalPlayer then
SetupPlayerESP(player)
end
end)

Players.PlayerRemoving:Connect(function(player)
local var_jzxn9i = ESP[player]
if esp then
esp.targetTransparency = 0
end
end)

local var_lqnux3 toggleFly(enabled)
local var_4c74xr = LocalPlayer.Character
if not char then return end
local var_hct4vf = char:FindFirstChild("HumanoidRootPart")
local var_143q0k = char:FindFirstChild("Humanoid")
if not rootPart or not humanoid then return end

if enabled then
if humanoid.Health <= 0 then return end
humanoid.PlatformStand = true
bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
bodyVelocity.Velocity = Vector3.new(0, 0, 0)
bodyVelocity.Parent = rootPart

bodyGyro = Instance.new("BodyGyro")
bodyGyro.MaxTorque = Vector3.new(400000, 400000, 400000)
bodyGyro.P = 3000
bodyGyro.D = 500
bodyGyro.Parent = rootPart

flyConnection = RunService.RenderStepped:Connect(function(dt)
if not humanoid or humanoid.Health <= 0 then
toggleFly(false)
return
end
local var_ynuxmp = Vector3.new(0, 0, 0)
if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDirection = moveDirection + Camera.CFrame.LookVector end
if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDirection = moveDirection - Camera.CFrame.LookVector end
if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDirection = moveDirection - Camera.CFrame.RightVector end
if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDirection = moveDirection + Camera.CFrame.RightVector end
if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveDirection = moveDirection + Vector3.new(0, 1, 0) end
if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then moveDirection = moveDirection - Vector3.new(0, 1, 0) end

if moveDirection.Magnitude > 0 then
moveDirection = moveDirection.Unit * SilentAimSettings.FlySpeed
else
moveDirection = Vector3.new(0, 0, 0)
end

bodyVelocity.Velocity = moveDirection
local var_qstczi = Camera.CFrame.Position + Camera.CFrame.LookVector * 100
bodyGyro.CFrame = CFrame.new(rootPart.Position, lookAt)
end)
else
if bodyVelocity then bodyVelocity:Destroy() bodyVelocity = nil end
if bodyGyro then bodyGyro:Destroy() bodyGyro = nil end
if flyConnection then flyConnection:Disconnect() flyConnection = nil end
humanoid.PlatformStand = false
humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
rootPart.Velocity = Vector3.new(0, 0, 0)
rootPart.RotVelocity = Vector3.new(0, 0, 0)
end
end

LocalPlayer.CharacterAdded:Connect(function(newCharacter)
if bodyVelocity then bodyVelocity:Destroy() bodyVelocity = nil end
if bodyGyro then bodyGyro:Destroy() bodyGyro = nil end
if flyConnection then flyConnection:Disconnect() flyConnection = nil end

task.wait(0.1)

local var_c5rd4y = newCharacter:WaitForChild("Humanoid")
local var_lqit31 = newCharacter:WaitForChild("HumanoidRootPart")

humanoid.PlatformStand = false
humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
rootPart.Velocity = Vector3.new(0, 0, 0)
rootPart.RotVelocity = Vector3.new(0, 0, 0)

if SilentAimSettings.FlyEnabled then
toggleFly(true)
end
end)

local var_fr9871 = game.ReplicatedStorage.Gun.Scripts.RecoilHandler
local var_9mnabl, recoilClass = pcall(require, recoilModulePath)
if success then
local var_5erid1 = recoilClass.nextStep
recoilClass.nextStep = function(self, ...)
if SilentAimSettings.NoRecoilEnabled then
return
end
return originalNextStep(self, ...)
end
else
warn("Failed to load RecoilHandler module: " .. tostring(recoilClass))
end

local var_bgkldh = nil
local var_c0ttud = nil
local var_otjoey = nil
local var_u72v85 = nil
local var_aimjgm = {}

local var_kmrty8 toggleHempESP(enabled)
if enabled then
local var_26wu3t = workspace:FindFirstChild("Hemp")
if not hempFolder then
warn("Hemp folder not found in workspace!")
return
end

hempScreenGui = Instance.new("ScreenGui")
hempScreenGui.Name = "HempESP"
hempScreenGui.IgnoreGuiInset = true
hempScreenGui.ResetOnSpawn = false
hempScreenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local var_x0tcpp = Color3.fromRGB(255, 0, 0)
local var_azujc5 = 1
local var_nyw0yi = 1.2
local var_nlovlq = Color3.fromRGB(255, 255, 255)
local var_nws5bc = 12
local var_pjzri1 = Enum.Font.Arcade

hempEspTable = {}

-- Fix for getScreenBounds function (replace the entire function, around line 530-570)
local var_d58edn getScreenBounds(target)
    if not target or target.Parent == nil then return nil end

    local var_upicbu = target:IsA("BasePart") and target or (target:IsA("Model") and (target.PrimaryPart or target:FindFirstChildWhichIsA("BasePart")))
    if not part or part.Parent == nil or part.Transparency >= 1 then return nil end

    local var_rfg9fp = part.Size * BOX_SIZE_MULTIPLIER
    local var_uww18m = part.CFrame
    local var_ikp9tj = {
        cf * Vector3.new(size.X/2, size.Y/2, size.Z/2),
        cf * Vector3.new(size.X/2, size.Y/2, -size.Z/2),
        cf * Vector3.new(size.X/2, -size.Y/2, size.Z/2),
        cf * Vector3.new(size.X/2, -size.Y/2, -size.Z/2),
        cf * Vector3.new(-size.X/2, size.Y/2, size.Z/2),
        cf * Vector3.new(-size.X/2, size.Y/2, -size.Z/2),
        cf * Vector3.new(-size.X/2, -size.Y/2, size.Z/2),
        cf * Vector3.new(-size.X/2, -size.Y/2, -size.Z/2)
    }

    local var_3od1vm, minY, maxX, maxY = math.huge, math.huge, -math.huge, -math.huge
    local var_viazkx = false

    for _, corner in ipairs(corners) do
        local var_u8hj5u, visible = Camera:WorldToViewportPoint(corner)  -- Remove .Position; corner is already Vector3
        if visible then
            onScreen = true
            minX = math.min(minX, screenPos.X)
            minY = math.min(minY, screenPos.Y)
            maxX = math.max(maxX, screenPos.X)
            maxY = math.max(maxY, screenPos.Y)
        end
    end

    if not onScreen then return nil end
    return Vector2.new(minX, minY), Vector2.new(maxX - minX, maxY - minY)
end

local var_ogy619 createESP(child)
local var_lbqrpc = Instance.new("Frame")
boxFrame.BackgroundTransparency = 1
boxFrame.BorderColor3 = BOX_COLOR
boxFrame.BorderSizePixel = BOX_THICKNESS
boxFrame.Visible = false
boxFrame.Parent = hempScreenGui

local var_jfnl4r = Instance.new("TextLabel")
textLabel.Text = "Hemp"
textLabel.TextColor3 = TEXT_COLOR
textLabel.TextSize = TEXT_SIZE
textLabel.Font = TEXT_FONT
textLabel.BackgroundTransparency = 1
textLabel.Size = UDim2.new(0, 50, 0, 20)
textLabel.Visible = false
textLabel.Parent = hempScreenGui

hempEspTable[child] = {box = boxFrame, text = textLabel}
end

local var_nz3xle removeESP(child)
local var_g56lw5 = hempEspTable[child]
if esp then
esp.box:Destroy()
esp.text:Destroy()
hempEspTable[child] = nil
end
end

for _, child in ipairs(hempFolder:GetChildren()) do
createESP(child)
end

hempChildAddedConn = hempFolder.ChildAdded:Connect(createESP)

hempChildRemovedConn = hempFolder.ChildRemoved:Connect(removeESP)

hempESPConnection = RunService.RenderStepped:Connect(function()
for child, esp in pairs(hempEspTable) do
if not child or child.Parent == nil then
removeESP(child)
continue
end

local var_67uu0r, size = getScreenBounds(child)
if pos and size then
esp.box.Position = UDim2.new(0, pos.X, 0, pos.Y)
esp.box.Size = UDim2.new(0, size.X, 0, size.Y)
esp.box.Visible = true

esp.text.Position = UDim2.new(0, pos.X + (size.X / 2) - 25, 0, pos.Y + size.Y)
esp.text.Visible = true
else
esp.box.Visible = false
esp.text.Visible = false
end
end
end)
else
if hempChildAddedConn then hempChildAddedConn:Disconnect() hempChildAddedConn = nil end
if hempChildRemovedConn then hempChildRemovedConn:Disconnect() hempChildRemovedConn = nil end
if hempESPConnection then hempESPConnection:Disconnect() hempESPConnection = nil end
if hempScreenGui then hempScreenGui:Destroy() hempScreenGui = nil end
hempEspTable = {}
end
end

local var_xk3huj = game:GetService("Players")
local var_nkp397 = game:GetService("ReplicatedStorage")
local var_ormpep = game:GetService("RunService")
local var_8h9vp0 = game:GetService("TweenService")
local var_dj0hs7 = game:GetService("Debris")
local var_r5ouj5 = Players.LocalPlayer
local var_n4izi2 = workspace.CurrentCamera

local var_47h6a0
local var_vq3apk = ReplicatedStorage:FindFirstChild("Gun")
if gunFolder then
local var_5449sr = gunFolder:FindFirstChild("Scripts")
if scriptsFolder then
GunClient = scriptsFolder:FindFirstChild("GunClient")
end
end

if not GunClient then
warn("GunClient module not found! Bullet Tracer may not work.")
return
end

local var_s5cl9d = require(GunClient)

local var_8ve4sx createBulletTracer(origin, hitPosition)
local var_dpltyt = Instance.new("Attachment")
attach1.Position = origin
attach1.Parent = workspace.Terrain

local var_iyfabr = Instance.new("Attachment")
attach2.Position = hitPosition
attach2.Parent = workspace.Terrain

local var_6qkk5z = Instance.new("Beam")
beam.Attachment0 = attach1
beam.Attachment1 = attach2
beam.FaceCamera = true
beam.Color = ColorSequence.new(SilentAimSettings.BulletTracerColor)
beam.LightEmission = 1
beam.LightInfluence = 0
beam.Width0 = 0.1
beam.Width1 = 0.1
beam.Transparency = NumberSequence.new(0)
beam.Parent = workspace

Debris:AddItem(beam, 2)
Debris:AddItem(attach1, 2)
Debris:AddItem(attach2, 2)

task.delay(1, function()
local var_kj0yxi = TweenInfo.new(
1,
Enum.EasingStyle.Quad,
Enum.EasingDirection.Out
)

local var_c3aikk = { Value = 0 }
local var_dcqg9b = { Value = 1 }
local var_rd6n60 = TweenService:Create(dummy, fadeInfo, fadeGoal)
fadeTween:Play()

local var_kl5a4m
connection = RunService.Heartbeat:Connect(function(delta)
if fadeTween.PlaybackState == Enum.PlaybackState.Playing then
beam.Transparency = NumberSequence.new(dummy.Value)
elseif fadeTween.PlaybackState == Enum.PlaybackState.Completed then
if connection then
connection:Disconnect()
end
beam:Destroy()
attach1:Destroy()
attach2:Destroy()
end
end)

fadeTween.Completed:Connect(function()
if connection then
connection:Disconnect()
end
beam:Destroy()
attach1:Destroy()
attach2:Destroy()
end)
end)
end

-- Replace the entire u34.hit block starting at line 719 with this corrected version (ensures all if/elseif chains are closed properly)
local var_gd036z = u34.hit
u34.hit = function(self, raycastResult, isHit, ...)
    originalHit(self, raycastResult, isHit, ...)

    if SilentAimSettings.BulletTracerEnabled then
        local var_hou01v = self.FireOriginPart and self.FireOriginPart.Position or Camera.CFrame.Position
        local var_c7g5gh = raycastResult.Position
        createBulletTracer(origin, hitPosition)
    end

    if SilentAimSettings.HitSoundEnabled and isHit then
        local var_yzostf
        if SilentAimSettings.HitSoundType == "arena change" then
            soundId = "rbxassetid://83717596220569"
        elseif SilentAimSettings.HitSoundType == "vortex.lol" then
            soundId = "rbxassetid://106586644436584"
        elseif SilentAimSettings.HitSoundType == "nya" then
            soundId = "rbxassetid://5039052146"
        end
        local var_omk8ya = Instance.new("Sound")
        hitSound.SoundId = soundId
        hitSound.Volume = SilentAimSettings.HitSoundVolume
        hitSound.Parent = game:GetService("SoundService")
        hitSound:Play()
        hitSound.Ended:Connect(function()
            hitSound:Destroy()
        end)
    end
end

local var_u12ts0 = u34.fire
u34.fire = function(self, isFirst, ...)
originalFire(self, isFirst, ...)

if SilentAimSettings.BulletTracerEnabled then
local var_g2ddr7 = Camera.CFrame.LookVector
local var_2moili = RaycastParams.new()
rayParams.FilterType = Enum.RaycastFilterType.Blacklist
rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
local var_0c503h = workspace:Raycast(Camera.CFrame.Position, direction * 1000, rayParams)

local var_5w2z7s = rayResult and rayResult.Position or (Camera.CFrame.Position + direction * 1000)
local var_k78w7l = self.FireOriginPart and self.FireOriginPart.Position or Camera.CFrame.Position

createBulletTracer(origin, hitPos)
end
end

RunService.Heartbeat:Connect(function()
end)

print("Bullet Tracer Exploit Loaded with 2-Second Smooth Removal! Fire your gun to see tracers.")

local var_c6h59s = loadstring(game:HttpGet("https://raw.githubusercontent.com/Mohurjdg/vortex/refs/heads/main/libig"))()
if not Library then warn("bla bla bla ble ble ble blu blu blu bye bye"); Library = {CreateWindow = function() return {AddTab = function() return {AddLeftTabbox = function() return {AddTab = function() return {} end} end} end} end} end
local var_ju0lqc = tick()
local var_gu3zot = 0
local var_pjw2j7 = 0

local var_40f1u4 updateFPS()
frameCount = frameCount + 1
local var_wiv48e = tick()
if currentTime - lastFrameTime >= 1 then
fps = math.floor(frameCount / (currentTime - lastFrameTime))
frameCount = 0
lastFrameTime = currentTime
end
Library:SetWatermark(string.format("Blume.cc Rost Alpha FPS: %d", fps))
end
Library:SetWatermark("Blume.cc Rost Alpha: 0")

local var_u7hbnc = Library:CreateWindow({Title = 'Vortex.lol Beta', Center = true, AutoShow = true, TabPadding = 8, MenuFadeTime = 0.2})
local var_9624kf = Window:AddTab("General")
local var_g0fxj2 = Window:AddTab("Visuals")
local var_4twzy7 = Window:AddTab("Misc")
local var_mjwts6 = GeneralTab:AddLeftTabbox("Main") do
local var_e2d1ou = MainBOX:AddTab("Main")
Main:AddToggle("aim_Enabled", {Text = "Enabled"}):AddKeyPicker("aim_Enabled_KeyPicker", {Default = "RightAlt", SyncToggleState = true, Mode = "Toggle", Text = "Enabled", NoUI = false})
if Options and Options.aim_Enabled_KeyPicker then Options.aim_Enabled_KeyPicker:OnClick(function()
SilentAimSettings.Enabled = not SilentAimSettings.Enabled
Toggles.aim_Enabled.Value = SilentAimSettings.Enabled
Toggles.aim_Enabled:SetValue(SilentAimSettings.Enabled)
target_tracer.Visible = SilentAimSettings.Enabled
end) end
Main:AddToggle("VisibleCheck", {Text = "Visible Check", Default = SilentAimSettings.VisibleCheck}):OnChanged(function()
SilentAimSettings.VisibleCheck = Toggles.VisibleCheck.Value
end)
Main:AddDropdown("TargetPart", {AllowNull = true, Text = "Target Part", Default = SilentAimSettings.TargetPart, Values = {"Head", "HumanoidRootPart", "Random"}}):OnChanged(function()
SilentAimSettings.TargetPart = Options.TargetPart.Value
end)
Main:AddSlider('HitChance', {Text = 'Hit chance', Default = 100, Min = 0, Max = 100, Rounding = 1, Compact = false})
Options.HitChance:OnChanged(function()
SilentAimSettings.HitChance = Options.HitChance.Value
end)
end

local var_ajx89s = GeneralTab:AddLeftTabbox("Miscellaneous")
local var_48hf4b = GeneralTab:AddLeftTabbox("Field Of View") do
local var_37l2un = FieldOfViewBOX:AddTab("Visuals")
Main:AddToggle("Visible", {Text = "Show FOV Circle"}):AddColorPicker("Color", {Default = Color3.fromRGB(255, 0, 0)}):OnChanged(function()
fov_circle.Visible = Toggles.Visible.Value
SilentAimSettings.FOVVisible = Toggles.Visible.Value
end)
Main:AddSlider("Radius", {Text = "FOV Circle Radius", Min = 0, Max = 360, Default = 130, Rounding = 0}):OnChanged(function()
fov_circle.Radius = Options.Radius.Value
SilentAimSettings.FOVRadius = Options.Radius.Value
end)
Main:AddToggle("MousePosition", {Text = "Show Silent Aim Target"}):AddColorPicker("MouseVisualizeColor", {Default = Color3.fromRGB(255, 0, 0)}):OnChanged(function()
target_tracer.Visible = Toggles.MousePosition.Value
SilentAimSettings.ShowSilentAimTarget = Toggles.MousePosition.Value
end)
Main:AddDropdown("FOVMethod", {Text = "FOV Method", Default = SilentAimSettings.FOVMethod, Values = {"Normal", "Rainbow"}}):OnChanged(function()
SilentAimSettings.FOVMethod = Options.FOVMethod.Value
end)
local var_hx0mep = MiscellaneousBOX:AddTab("Prediction")
PredictionTab:AddToggle("Prediction", {Text = "Mouse.Hit/Target Prediction"}):OnChanged(function()
SilentAimSettings.MouseHitPrediction = Toggles.Prediction.Value
end)
PredictionTab:AddSlider("Amount", {Text = "Prediction Amount", Min = 0.165, Max = 1, Default = 0.165, Rounding = 3}):OnChanged(function()
PredictionAmount = Options.Amount.Value
SilentAimSettings.MouseHitPredictionAmount = Options.Amount.Value
end)
end

local var_l2b33o = GeneralTab:AddRightTabbox("Gun mod") do
local var_xh695b = GunModBOX:AddTab("Gun mod")
Main:AddToggle("NoRecoil", {Text = "No Recoil", Default = SilentAimSettings.NoRecoilEnabled}):OnChanged(function()
SilentAimSettings.NoRecoilEnabled = Toggles.NoRecoil.Value
end)
end

local var_sk6pi3 = VisualsTab:AddLeftTabbox("Esp") do
local var_hfzcw9 = EspBOX:AddTab("Esp")
Main:AddToggle("BoxEnabled", {Text = "Box ESP", Default = SilentAimSettings.BoxEnabled}):AddColorPicker("BoxColor", {Default = SilentAimSettings.BoxColor}):OnChanged(function()
SilentAimSettings.BoxEnabled = Toggles.BoxEnabled.Value
end)
Options.BoxColor:OnChanged(function()
SilentAimSettings.BoxColor = Options.BoxColor.Value
end)
Main:AddToggle("HealthEnabled", {Text = "Healthbar ESP", Default = SilentAimSettings.HealthEnabled}):OnChanged(function()
SilentAimSettings.HealthEnabled = Toggles.HealthEnabled.Value
end)
Main:AddToggle("NameEnabled", {Text = "Name ESP", Default = SilentAimSettings.NameEnabled}):OnChanged(function()
SilentAimSettings.NameEnabled = Toggles.NameEnabled.Value
end)
Main:AddDropdown("NameType", {Text = "Name Type", Default = SilentAimSettings.NameType, Values = {"Name", "DisplayName"}}):OnChanged(function()
SilentAimSettings.NameType = Options.NameType.Value
end)
Main:AddToggle("TracerESPEnabled", {Text = "Tracer ESP", Default = SilentAimSettings.TracerESPEnabled}):AddColorPicker("TracerESPColor", {Default = SilentAimSettings.TracerESPColor}):OnChanged(function()
SilentAimSettings.TracerESPEnabled = Toggles.TracerESPEnabled.Value
end)
Options.TracerESPColor:OnChanged(function()
SilentAimSettings.TracerESPColor = Options.TracerESPColor.Value
end)
Main:AddDropdown("TracerESPMethod", {Text = "Tracer Method", Default = SilentAimSettings.TracerESPMethod, Values = {"Top", "Mouse", "Center"}}):OnChanged(function()
SilentAimSettings.TracerESPMethod = Options.TracerESPMethod.Value
end)
end

local var_tetspw = VisualsTab:AddRightTabbox("World Changer") do
local var_y7eb72 = WorldChangerBOX:AddTab("World Changer")
Main:AddToggle("ColorLighting", {Text = "Color Lighting", Default = false}):AddColorPicker("LightingColor", {Default = Color3.fromRGB(255, 255, 255)})
Toggles.ColorLighting:OnChanged(function()
if Toggles.ColorLighting.Value then
Lighting.Ambient = Options.LightingColor.Value
else
Lighting.Ambient = originalAmbient
end
end)
Options.LightingColor:OnChanged(function()
if Toggles.ColorLighting.Value then
Lighting.Ambient = Options.LightingColor.Value
end
end)
Main:AddToggle("RemoveFog", {Text = "Remove Fog", Default = false})
Toggles.RemoveFog:OnChanged(function()
if Toggles.RemoveFog.Value then
Lighting.FogEnd = 1000000
Lighting.FogStart = 0
else
Lighting.FogEnd = originalFogEnd
Lighting.FogStart = originalFogStart
end
end)
Main:AddToggle("TimeChanger", {Text = "Time Changer", Default = false})
Main:AddSlider("GameTime", {Text = "Game Time", Min = 0, Max = 24, Default = Lighting.ClockTime, Rounding = 1})
Toggles.TimeChanger:OnChanged(function()
if not Toggles.TimeChanger.Value then
Lighting.ClockTime = originalClockTime
end
end)
Options.GameTime:OnChanged(function()
if Toggles.TimeChanger.Value then
Lighting.ClockTime = Options.GameTime.Value
end
end)
end

local var_an04ja = VisualsTab:AddRightTabbox("World") do
local var_goi1xm = WorldBOX:AddTab("World")
Main:AddToggle("HempESPEnabled", {Text = "Hemp ESP", Default = SilentAimSettings.HempESPEnabled}):OnChanged(function()
SilentAimSettings.HempESPEnabled = Toggles.HempESPEnabled.Value
toggleHempESP(SilentAimSettings.HempESPEnabled)
end)
end

local var_7z0utg = VisualsTab:AddLeftTabbox("Local Player") do
local var_ojo9x6 = LocalPlayerBOX:AddTab("Local Player")
Main:AddToggle("BulletTracerEnabled", {Text = "Bullet Tracer", Default = SilentAimSettings.BulletTracerEnabled}):AddColorPicker("BulletTracerColor", {Default = SilentAimSettings.BulletTracerColor})
Toggles.BulletTracerEnabled:OnChanged(function()
SilentAimSettings.BulletTracerEnabled = Toggles.BulletTracerEnabled.Value
end)
Options.BulletTracerColor:OnChanged(function()
SilentAimSettings.BulletTracerColor = Options.BulletTracerColor.Value
end)
Main:AddToggle("HitSoundEnabled", {Text = "Hit Sound", Default = SilentAimSettings.HitSoundEnabled}):OnChanged(function()
    SilentAimSettings.HitSoundEnabled = Toggles.HitSoundEnabled.Value
end)
Main:AddSlider("HitSoundVolume", {Text = "Hit Sound Volume", Min = 1, Max = 10, Default = SilentAimSettings.HitSoundVolume, Rounding = 0}):OnChanged(function()
    SilentAimSettings.HitSoundVolume = Options.HitSoundVolume.Value
end)
Main:AddDropdown("HitSoundType", {Text = "Hit Sound Type", Default = SilentAimSettings.HitSoundType, Values = {"arena change", "vortex.lol", "nya"}}):OnChanged(function()
    SilentAimSettings.HitSoundType = Options.HitSoundType.Value
end)
end

local var_27f8b8 = MiscTab:AddLeftTabbox("Zoom") do
local var_8rrzwf = ZoomBOX:AddTab("Zoom")
Main:AddToggle("Zoom", {Text = "Enabled"}):AddKeyPicker("Zoom_KeyPicker", {Default = SilentAimSettings.ZoomKey, SyncToggleState = true, Mode = "Toggle", Text = "Zoom", NoUI = false})
if Options and Options.Zoom_KeyPicker then Options.Zoom_KeyPicker:OnClick(function()
SilentAimSettings.ZoomEnabled = not SilentAimSettings.ZoomEnabled
Toggles.Zoom.Value = SilentAimSettings.ZoomEnabled
Toggles.Zoom:SetValue(SilentAimSettings.ZoomEnabled)
end) end
Main:AddSlider("ZoomFOV", {Text = "Zoom FOV", Min = 20, Max = 50, Default = SilentAimSettings.ZoomFOV, Rounding = 0}):OnChanged(function()
SilentAimSettings.ZoomFOV = Options.ZoomFOV.Value
end)
end

local var_x2ycju = MiscTab:AddLeftTabbox("FOV Modify") do
local var_gklc2h = FovModifyBOX:AddTab("FOV Modify")
Main:AddToggle("FovChanger", {Text = "Enabled", Default = SilentAimSettings.FovChangerEnabled}):OnChanged(function()
SilentAimSettings.FovChangerEnabled = Toggles.FovChanger.Value
end)
Main:AddSlider("FovValue", {Text = "FOV Value", Min = 30, Max = 120, Default = SilentAimSettings.FovValue, Rounding = 0}):OnChanged(function()
SilentAimSettings.FovValue = Options.FovValue.Value
end)
end

local var_63n978 = MiscTab:AddRightTabbox("Fly") do
local var_hy1all = FlyBOX:AddTab("Fly")
Main:AddToggle("Fly", {Text = "Enabled"}):AddKeyPicker("Fly_KeyPicker", {Default = SilentAimSettings.FlyKey, SyncToggleState = true, Mode = "Toggle", Text = "Fly", NoUI = false})
if Options and Options.Fly_KeyPicker then Options.Fly_KeyPicker:OnClick(function()
SilentAimSettings.FlyEnabled = not SilentAimSettings.FlyEnabled
Toggles.Fly.Value = SilentAimSettings.FlyEnabled
Toggles.Fly:SetValue(SilentAimSettings.FlyEnabled)
toggleFly(SilentAimSettings.FlyEnabled)
end) end
Main:AddSlider("FlySpeed", {Text = "Fly Speed", Min = 50, Max = 500, Default = 50, Rounding = 0}):OnChanged(function()
SilentAimSettings.FlySpeed = Options.FlySpeed.Value
end)
end

RenderStepped:Connect(function(deltaTime)
updateFPS()
if Toggles.MousePosition.Value and Toggles.aim_Enabled.Value then
if getClosestPlayer() then
local var_1hiffb = getClosestPlayer().Parent.PrimaryPart or getClosestPlayer()
local var_5fce3i, IsOnScreen = WorldToViewportPoint(Camera, Root.Position)
target_tracer.Color = Options.MouseVisualizeColor.Value
target_tracer.From = getMousePosition()
target_tracer.To = Vector2.new(RootToViewportPoint.X, RootToViewportPoint.Y)
target_tracer.Visible = IsOnScreen
else
target_tracer.Visible = false
end
end
local var_0qseh5 = getMousePosition()
if Toggles.Visible.Value then
fov_circle.Position = mousePos
fov_circle.Color = Options.Color.Value
fov_circle.Radius = Options.Radius.Value
updateFOVDots(mousePos, Options.Radius.Value, Options.Color.Value, SilentAimSettings.FOVMethod, deltaTime)
else
fov_circle.Visible = false
for _, line in ipairs(rainbow_lines) do
line.Visible = false
end
end
if Toggles.Zoom.Value then
Camera.FieldOfView = Options.ZoomFOV.Value
elseif Toggles.FovChanger.Value then
Camera.FieldOfView = Options.FovValue.Value
else
Camera.FieldOfView = defaultFOV
end
if Toggles.TimeChanger.Value then
Lighting.ClockTime = Options.GameTime.Value
end
for player, esp in pairs(ESP) do
local var_6bdwwr = player.Character
if not character or not FindFirstChild(character, "HumanoidRootPart") then
if esp then RemoveESP(player) end
continue
end
local var_rduice = character:FindFirstChild("Humanoid")
local var_i5d16a = humanoid and humanoid.Health > 0
local var_tg7oei, boxSize = get2DBBox(character)
local var_vtcput = boxPos ~= nil
esp.transparency = esp.transparency + (esp.targetTransparency - esp.transparency) * lerpFactor
esp.currentFill = esp.currentFill + (esp.targetFill - esp.currentFill) * lerpFactor
esp.currentColor = esp.currentColor:Lerp(esp.targetColor, lerpFactor)
local var_kztxtu = esp.transparency
local var_4jmb2m = trans > 0.01 and onScreen and healthValid
if esp.targetTransparency == 0 and trans < 0.01 then
RemoveESP(player)
continue
end
if visible then
if Toggles.BoxEnabled.Value then
esp.box.Position = boxPos
esp.box.Size = boxSize
esp.box.Color = SilentAimSettings.BoxColor
esp.box.Transparency = trans
esp.box.Visible = true
else
esp.box.Visible = false
end
if Toggles.HealthEnabled.Value then
local var_hss3ql = 2
local var_oi1i98 = Vector2.new(boxPos.X - barWidth - 2, boxPos.Y)
local var_6z89vp = boxSize.Y
local var_zakh0m = barHeight * esp.currentFill
local var_1smhut = Vector2.new(barPos.X, barPos.Y + barHeight - fillHeight)
esp.healthBg.Position = barPos
esp.healthBg.Size = Vector2.new(barWidth, barHeight)
esp.healthBg.Transparency = trans * 0.5
esp.healthBg.Visible = true
esp.healthFill.Position = fillPos
esp.healthFill.Size = Vector2.new(barWidth, fillHeight)
esp.healthFill.Color = esp.currentColor
esp.healthFill.Transparency = trans
esp.healthFill.Visible = true
else
esp.healthBg.Visible = false
esp.healthFill.Visible = false
end
if Toggles.NameEnabled.Value then
esp.nameText.Text = player[SilentAimSettings.NameType]
esp.nameText.Position = Vector2.new(boxPos.X + boxSize.X / 2, boxPos.Y - 15)
esp.nameText.Transparency = trans
esp.nameText.Visible = true
else
esp.nameText.Visible = false
end
if SilentAimSettings.TracerESPEnabled and visible then
esp.tracer.Color = SilentAimSettings.TracerESPColor
esp.tracer.Transparency = trans
local var_tatkqz = Vector2.new(boxPos.X + boxSize.X / 2, boxPos.Y + boxSize.Y)
local var_19wtq6
if SilentAimSettings.TracerESPMethod == "Top" then
fromPos = Vector2.new(Camera.ViewportSize.X / 2, 0)
elseif SilentAimSettings.TracerESPMethod == "Mouse" then
fromPos = getMousePosition()
elseif SilentAimSettings.TracerESPMethod == "Center" then
fromPos = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
end
esp.tracer.From = fromPos
esp.tracer.To = targetPos
esp.tracer.Visible = true
else
esp.tracer.Visible = false
end
else
esp.box.Visible = false
esp.healthBg.Visible = false
esp.healthFill.Visible = false
esp.nameText.Visible = false
esp.tracer.Visible = false
end
end
end)

local var_q7h19v
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(...)
local var_k314da = getnamecallmethod()
local var_nipmi6 = {...}
local var_8lk6ge = Arguments[1]
local var_r6bp63 = CalculateChance(SilentAimSettings.HitChance)
if Toggles.aim_Enabled.Value and self == workspace and not checkcaller() and chance == true then
if Method == "Raycast" and SilentAimSettings.SilentAimMethod == "Raycast" then
if ValidateArguments(Arguments, ExpectedArguments.Raycast) then
local var_tdoelg = Arguments[2]
local var_by93zh = getClosestPlayer()
if HitPart then
Arguments[3] = getDirection(A_Origin, HitPart.Position)
local var_d0xojs = oldNamecall(unpack(Arguments))
return result
end
end
end
end
return oldNamecall(...)
end))

local var_mvt856 = nil
oldIndex = hookmetamethod(game, "__index", newcclosure(function(Self, Index)
if Self == Mouse and not checkcaller() then
local var_c3r8sz = getClosestPlayer()
if closest and SilentAimSettings.Enabled then
if Index == "Hit" or Index == "hit" then
local var_pdult9 = closest.Position
if SilentAimSettings.MouseHitPrediction then
local var_3oi5ff = closest.Velocity
targetPos = targetPos + velocity * SilentAimSettings.MouseHitPredictionAmount
end
return CFrame.new(targetPos)
elseif Index == "Target" or Index == "target" then
return closest
elseif Index == "X" or Index == "x" then
return Self.X
elseif Index == "Y" or Index == "y" then
return Self.Y
elseif Index == "UnitRay" then
return Self.unitRay
end
end
end
return oldIndex(Self, Index)
end))'))()
